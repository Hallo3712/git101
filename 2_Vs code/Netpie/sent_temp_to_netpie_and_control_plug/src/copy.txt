#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include "DHT.h"

// ====== WiFi & MQTT Config ======
const char* ssid = "Test";
const char* password = "Test987654321";
const char* mqtt_server = "broker.netpie.io";
const int mqtt_port = 1883;
const char* mqtt_Client = "04a9bf82-326a-4b95-a6e7-260d3e87e7cc";
const char* mqtt_username = "Wq7BxGDMXpa7up7Wg2WgnyCXHVBVeJY3";
const char* mqtt_password = "EgX9tJwgv8aLVVvqB31CHuN5Aw2bMXeD";

WiFiClient espClient;
PubSubClient client(espClient);

#define led LED_BUILTIN        // GPIO2 (Active LOW)
#define DHTPIN D5              // GPIO14 (D5) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DHT11

// --- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Relay Pin ‡πÄ‡∏õ‡πá‡∏ô D6 (GPIO12) ---
#define RELAY_PIN D6           // GPIO12 (D6) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Relay
// ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: D6 ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤ D3 (GPIO0) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Relay ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö Boot Mode
// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢ Relay ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏Ç‡∏≤ D6 ‡∏Ç‡∏≠‡∏á NodeMCU
// Relay ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô Active HIGH: HIGH ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î, LOW ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î
DHT dht;

int c1 = 0; // ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏£‡∏≠‡∏ö

// ====== MQTT reconnect ======
void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection‚Ä¶");
    if (client.connect(mqtt_Client, mqtt_username, mqtt_password)) {
      Serial.println("connected");
      // ‡∏Å‡∏≤‡∏£ subscribe ‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
      // client.subscribe("@msg/test2"); // ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ã‡πâ‡∏≥
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ subscribe ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£ subscribe
      if (client.subscribe("@msg/test2")) {
        Serial.println("Subscribed to @msg/test2");
      } else {
        Serial.print("Failed to subscribe to @msg/test2, rc=");
        Serial.println(client.state()); // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£ subscribe
      }
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

// ====== Callback for incoming MQTT messages ======
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  String message;
  for (unsigned int i = 0; i < length; i++) { // ‡πÉ‡∏ä‡πâ unsigned int ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö i
    message += (char)payload[i];
  }
  Serial.println(message);

  // === ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå ===
  if (String(topic) == "@msg/test2") {
    if (message == "on") {
      // --- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Relay Active HIGH, ‡∏™‡πà‡∏á HIGH ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î ---
      digitalWrite(RELAY_PIN, HIGH); 
      Serial.println("üîî Relay ON");
    } else if (message == "off") {
      // --- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Relay Active HIGH, ‡∏™‡πà‡∏á LOW ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î ---
      digitalWrite(RELAY_PIN, LOW);   
      Serial.println("üîï Relay OFF");
    }
  }
}

// ====== Setup ======
void setup() {
  Serial.begin(115200);
  Serial.println("\nConnecting to WiFi...");

  pinMode(led, OUTPUT);
  pinMode(RELAY_PIN, OUTPUT);
  // --- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏õ‡∏¥‡∏î‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå (Active HIGH = LOW) ---
  digitalWrite(RELAY_PIN, LOW); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏õ‡∏¥‡∏î‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå

  // ‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö LED ‡∏ñ‡∏µ‡πà 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  for (int i = 0; i < 5; i++) {
    digitalWrite(led, LOW);    // ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü (LED_BUILTIN ‡πÄ‡∏õ‡πá‡∏ô Active LOW)
    delay(100);
    digitalWrite(led, HIGH);   // ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü (LED_BUILTIN ‡πÄ‡∏õ‡πá‡∏ô Active LOW)
    delay(100);
  }

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nWiFi connected. IP address:");
  Serial.println(WiFi.localIP());

  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);

  dht.setup(DHTPIN); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô DHT
}

// ====== Main Loop ======
void loop() {
  // --- ‡πÄ‡∏û‡∏¥‡πà‡∏° Serial.println ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ MQTT ---
  if (!client.connected()) {
    Serial.println("MQTT Disconnected. Reconnecting...");
    reconnect();
  }
  client.loop(); // ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° MQTT ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤

  static unsigned long lastSendTime = 0;
  const unsigned long sendInterval = 5000; // ‡∏™‡πà‡∏á‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

  if (millis() - lastSendTime >= sendInterval) {
    lastSendTime = millis();
    c1++;

    float humidity = dht.getHumidity();
    float temperature = dht.getTemperature();
    String status = "Read";

    if (isnan(humidity) || isnan(temperature)) {
      status = "Nan";
      Serial.println("‚ùå Failed to read from DHT sensor, skipping data transmission");

      String data = "{\"data\" : {\"count\" :" + String(c1) + ", \"status\" : \"" + status + "\"}}";
      Serial.println(data);
      client.publish("@shadow/data/update", data.c_str());
      return;
    }

    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ
    Serial.println("‚úÖ Read successful");
    Serial.println("=== Sensor Readings ===");
    Serial.print("Count: "); Serial.println(c1);
    Serial.print("Temperature: "); Serial.print(temperature, 1); Serial.println(" ¬∞C");
    Serial.print("Humidity: "); Serial.print(humidity, 1); Serial.println(" %");
    Serial.print("Status: "); Serial.println(status);

    String data = "{\"data\" : {\"count\" :" + String(c1) +
                      ", \"temp\" :" + String(temperature, 1) +
                      ", \"humidity\" :" + String(humidity, 1) +
                      ", \"status\" : \"" + status + "\"}}";

    Serial.println(data);
    client.publish("@shadow/data/update", data.c_str());
  }
}